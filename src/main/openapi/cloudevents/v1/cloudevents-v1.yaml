openapi: "3.0.3"
info:
  title: Reusable components for CloudEvents
  description: The definitions comply with the [JSON format](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md) of the [CloudEvents 1.0 specification](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md).
  version: "${project.version}"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers: []
paths: {}
components:
  schemas:
    CloudEventBase: # extend this schema with allOf to define schemas for specific events, with constraints on data/data_base64 and type
      type: object
      description: Context attributes of a CloudEvent
      properties:
        specversion:
          type: string
          minLength: 1
          description: The version of the CloudEvents specification which the event uses.
          example: "1.0"
        id:
          type: string
          minLength: 1
          description: Identifies the event. Producers MUST ensure that source + id is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same id. Consumers MAY assume that Events with identical source and id are duplicates.
          example: "550e8400-e29b-41d4-a716-446655440000"
        type:
          description: >
            Type of event of the originating occurrence.<br>
            Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type.<br>

            SHOULD be prefixed with a reverse-DNS name. The prefixed domain dictates the organization which defines the semantics of this event type.
          type: string
          minLength: 1
          example: "be.nsso.employer.address.updated"
        source:
          type: string
          format: uri-reference
          minLength: 1
          description: >
            Identifies the context in which an event happened.<br>
            Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.<br>

            Producers MUST ensure that source + id is unique for each distinct event.<br>

            An application MAY assign a unique source to each distinct producer, which makes it
            easy to produce unique IDs since no other producer will have the same source.
            The application MAY use UUIDs, URNs, DNS authorities or an application-specific
            scheme to create unique source identifiers.<br>

            An absolute URI is RECOMMENDED
          example: "urn:event-source:nsso:employer-register"
        datacontenttype:
          type: string
          minLength: 1
          description: Media type of the payload (values of data or data_base64).
            MUST adhere to the format specified in RFC 2046.
          default: "application/json"
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
        subject:
          type: string
          minLength: 1
          description: Subject of the event (optional, may also be only present in payload)
          example: "employer:123456"
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
        time:
          type: string
          format: date-time
          description: Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same source MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
        dataschema:
          description: Identifies the schema that data adheres to. Incompatible changes to the schema SHOULD be reflected by a different URI.
          type: string
          minLength: 1
          nullable: true
          format: uri
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
      required: [ id, type, specversion, source ]

    CloudEvent:
      description: An event expressing an occurrence and its context, represented using the [CloudEvents standard](https://github.com/cloudevents/spec). 
        A CloudEvent may be extended with additional context attributes, which should follow the naming and typing constraints specified by the [CloudEvents specification](https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md#context-attributes).
      allOf:
      - $ref: "#/components/schemas/CloudEventBase"
      type: object
      properties:
        data:
          description: The event payload in JSON format
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
        data_base64:
          description: Base64 encoded event payload. Must adhere to RFC4648. This property is mutually exclusive with `data`.
          type: string
          format: byte
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
          example: "Zm9vYg=="
      additionalProperties: true
        # restrictions on additional properties are commented out because they don't work well for code generation
        # additional context attributes:
        #       MUST consist of lower-case letters [a-z] or digits [0-9] from the ASCII character set.
        #       SHOULD start with a letter.
        #       MUST be at least one character in length, and SHOULD NOT exceed 20 characters.
        #       SHOULD be descriptive and terse.
        # The CloudEvents specification only supports below types for context attributes, to maximize messaging protocol compatibility
        # See https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md#type-system and https://github.com/cloudevents/spec/blob/main/cloudevents/formats/json-format.md#22-type-system-mapping
#        oneOf:
#          - type: string  # includes attributes with base64-encoded, uri, uri-reference or timestamp types
#            nullable: true
#            x-ignore-rules:
#              jsn-null: allow null to comply with CloudEvents 1.0 spec
#          - type: integer
#            format: int32
#            nullable: true
#            x-ignore-rules:
#              jsn-null: allow null to comply with CloudEvents 1.0 spec
#          - type: boolean
#            nullable: true
#            x-ignore-rules:
#              jsn-null: allow null to comply with CloudEvents 1.0 spec
      x-ignore-rules:
        jsn-naming: allow underscore in data_base64 property in order to comply with the CloudEvents standard

    AsyncMessageBase:
      # extend this schema with allOf to define schemas for specific async messages, with constraints on data/data_base64 and type
      description: Context attributes of an AsyncMessage. An AsyncMessage is an extension of the CloudEvent format, also allowing other async exchanges than events.
      allOf:
        - $ref: "#/components/schemas/CloudEventBase"
        - type: object
          properties:
            service:
              description: |
                Name of the service (API) that defines the format and exchange protocol of this message.
                Recommended to use reverse DNS notation, with the last segment being the major version number prefixed by the letter `v`.
              type: string
              minLength: 1
              example: "be.belgif.example.meeting.v1"
          required: [service]
      example:
        {
          "specversion": "1.0",
          "id": "1",
          "service": "be.belgif.meeting.v3",
          "source": "urn:cbe:enterprisenumber:9876543210",
          "type": "be.belgif.meeting.v3.meetings.create",
          "data": { "...": "..." }
        }

    AsyncReplyMessageBase:
      description: Context attributes for reply messages
      allOf:
        - $ref: "#/components/schemas/AsyncMessageBase"
      type: object
      properties:
        relatedto:
          description: The `id` of the corresponding request message
          type: string
          minLength: 1
        relatedtosource:
          description: The `source` of the corresponding request message
          type: string
          minLength: 1
      required: [relatedto, relatedtosource]
      example:
        {
          "specversion": "1.0",
          "id": "2",
          "service": "be.belgif.meeting.v3",
          "source": "urn:cbe:enterprisenumber:0123456789",
          "type": "be.belgif.meeting.v3.meetings.create.reply",
          "relatedto": "1",
          "relatedtosource": "urn:cbe:enterprisenumber:1234567890",
          "subject": "132456",
          "data": { "...": "..." }
        }

    AsyncProblemReplyMessage:
      description: An asynchronous problem reply message
      allOf:
        - $ref: "#/components/schemas/AsyncReplyMessageBase"
      type: object
      properties:
        data:
          $ref: "../../problem/v1/problem-v1.yaml#/components/schemas/Problem"
      required: [data]
      example:
        {
          "specversion": "1.0",
          "id": "987654-1234-1235-4567489798",
          "service": "be.belgif.meeting.v3",
          "source": "urn:cbe:enterprisenumber:0123456789",
          "type": "be.belgif.meeting.v3.meetings.create.problemReply",
          "datacontenttype": "application/problem+json",
          "relatedto": "1",
          "relatedtosource": "urn:cbe:enterprisenumber:1234567890",
          "data": {
            "type": "urn:problem-type:belgif:badRequest",
            "href": "https://www.belgif.be/specification/rest/api-guide/problems/badRequest.html",
            "title": "Bad Request",
            "status": 400,
            "detail":  "The input message is incorrect",
            "instance": "urn:uuid:987654-1234-1235-4567489798",
            "issues": [
              {
                "type": "urn:problem-type:belgif:input-validation:schemaViolation",
                "detail": "examplePropertyWithPattern a2345678901 doesn't match pattern '^\\d{11}$'",
                "in": "body",
                "name": "items[0].examplePropertyWithPattern",
                "value": "a2345678901"
              }
            ]
          }
        }

    AsyncMessage:
      description: An AsyncMessage is an extension of the CloudEvent format, also allowing other async exchanges than events.
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - $ref: "#/components/schemas/AsyncMessageBase"
      type: object
      properties:
        relatedto:
          description: The id of the request message for which this message is a reply. Must be present for reply or problemReply messages
          type: string
          minLength: 1
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
        relatedtosource:
          description: The `source` of the message for which this message is a reply. This attribute MUST be present when `relatedTo` is present.
          type: string
          minLength: 1
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec