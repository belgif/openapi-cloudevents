openapi: "3.0.3"
info:
  title: Reusable components for CloudEvents
  description: The definitions comply with the [JSON format](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md) of the [CloudEvents 1.0 specification](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md).
  version: "${project.version}"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers: []
paths: {}
components:
  responses:
    CloudEventStructuredResponse:
      description: "An event"
      content:
        application/cloudevents+json:
          schema:
            $ref: "#/components/schemas/CloudEvent"
    CloudEventBatchResponse:
      description: "Batch of events"
      content:
        application/cloudevents-batch+json:
          schema:
            $ref: "#/components/schemas/CloudEventBatch"
          x-ignore-rules:
            evo-object: allow array as top level data structure in order to comply with the CloudEvents standard
  requestBodies:
    CloudEventRequest:
      required: true
      content:
        application/cloudevents+json:
          schema:
            $ref: "#/components/schemas/CloudEvent"
    CloudEventBatchRequest:
      required: true
      content:
        application/cloudevents-batch+json:
          schema:
            $ref: "#/components/schemas/CloudEventBatch"
          x-ignore-rules:
            evo-object: allow array as top level data structure in order to comply with the CloudEvents standard
  schemas:
    CloudEventBatch:
      type: array
      items:
        $ref: "#/components/schemas/CloudEvent"
    CloudEvent:
      type: object
      properties:
        specversion:
          type: string
          minLength: 1
          description: The version of the CloudEvents specification which the event uses.
          example: "1.0"
        type:
          description: >
            Type of event of the originating occurrence.<br>
            Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type.<br>

            SHOULD be prefixed with a reverse-DNS name. The prefixed domain dictates the organization which defines the semantics of this event type.
          type: string
          minLength: 1
          example: "be.nsso.employer.address.updated"
        id:
          type: string
          minLength: 1
          description: Identifies the event. Producers MUST ensure that source + id is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same id. Consumers MAY assume that Events with identical source and id are duplicates.
          example: "550e8400-e29b-41d4-a716-446655440000"
        source:
          type: string
          format: uri-reference
          minLength: 1
          description: >
            Identifies the context in which an event happened.<br>
            Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.<br>

            Producers MUST ensure that source + id is unique for each distinct event.<br>
            
            An application MAY assign a unique source to each distinct producer, which makes it
            easy to produce unique IDs since no other producer will have the same source.
            The application MAY use UUIDs, URNs, DNS authorities or an application-specific
            scheme to create unique source identifiers.<br>
            
            An absolute URI is RECOMMENDED
          example: "urn:event-source:nsso:employer-register"
        datacontenttype:
          type: string
          minLength: 1
          description: Media type of the payload (values of data or data_base64).
            MUST adhere to the format specified in RFC 2046.
          default: "application/json"
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
        subject:
          type: string
          minLength: 1
          description: Subject of the event (optional, may also be only present in payload)
          example: "employer:123456"
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
        time:
          type: string
          format: date-time
          description: Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same source MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
        data:
          description: The event payload in JSON format
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
        data_base64:
          description: Base64 encoded event payload. Must adhere to RFC4648. This property is mutually exclusive with `data`.
          type: string
          format: byte
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
          example: "Zm9vYg=="
        dataschema:
          description: Identifies the schema that data adheres to. Incompatible changes to the schema SHOULD be reflected by a different URI.
          type: string
          minLength: 1
          nullable: true
          format: uri
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
      additionalProperties:
        # The CloudEvents specification only supports below types for context attributes, to maximize messaging protocol compatibility
        oneOf:
          - type: string  # includes attributes with base64-encoded, uri, uri-reference or timestamp types
            nullable: true
            x-ignore-rules:
              jsn-null: allow null to comply with CloudEvents 1.0 spec
          - type: integer
            format: int32
            nullable: true
            x-ignore-rules:
              jsn-null: allow null to comply with CloudEvents 1.0 spec
          - type: boolean
            nullable: true
            x-ignore-rules:
              jsn-null: allow null to comply with CloudEvents 1.0 spec
      required: [id, specversion, source, type]
      x-ignore-rules:
        jsn-naming: allow underscore in data_base64 property in order to comply with the CloudEvents standard
    CloudEventBase: # extend this schema with allOf to define schemas for specific events, with constraints on data/data_base64 and type
      type: object
      properties:
        specversion:
          type: string
          minLength: 1
          description: The version of the CloudEvents specification which the event uses.
          example: "1.0"
        id:
          type: string
          minLength: 1
          description: Identifies the event. Producers MUST ensure that source + id is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same id. Consumers MAY assume that Events with identical source and id are duplicates.
          example: "550e8400-e29b-41d4-a716-446655440000"
        source:
          type: string
          format: uri-reference
          minLength: 1
          description: >
            Identifies the context in which an event happened.<br>
            Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.<br>

            Producers MUST ensure that source + id is unique for each distinct event.<br>
            
            An application MAY assign a unique source to each distinct producer, which makes it
            easy to produce unique IDs since no other producer will have the same source.
            The application MAY use UUIDs, URNs, DNS authorities or an application-specific
            scheme to create unique source identifiers.<br>
            
            An absolute URI is RECOMMENDED
          example: "urn:event-source:nsso:employer-register"
        datacontenttype:
          type: string
          minLength: 1
          description: Media type of the payload (values of data or data_base64).
            MUST adhere to the format specified in RFC 2046.
          default: "application/json"
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
        subject:
          type: string
          minLength: 1
          description: Subject of the event (optional, may also be only present in payload)
          example: "employer:123456"
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
        time:
          type: string
          format: date-time
          description: Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same source MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
          nullable: true
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
        dataschema:
          description: Identifies the schema that data adheres to. Incompatible changes to the schema SHOULD be reflected by a different URI.
          type: string
          minLength: 1
          nullable: true
          format: uri
          x-ignore-rules:
            jsn-null: allow null to comply with CloudEvents 1.0 spec
      required: [id, specversion, source]